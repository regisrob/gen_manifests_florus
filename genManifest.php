<?php
/* ================================================================
 *  
 *  @author : Régis Robineau
 *  @project : Equipex Biblissima
 *  @description : create a minimal IIIF manifest from a basic 
 *  image sequence (csv file generated by buildCsvInput.php). Only
 *  applies to manuscripts from BM Lyon.
 *
 * ================================================================
*/

/* ======================================
 * ## MANUAL SETTINGS
 * ======================================
 */

$objectId = "B693836101_MS0604";
$mfLabel = "Lyon, Bibliothèque Municipale, Ms. 604";

/* ======================================
 * ## CSV INPUT
 * ======================================
 */

$csvFile = "input/sequences_iiif/Lyon-0604-sequence.csv";
$csvData = readCSV( $csvFile );

$firstImage = $csvData[0][1];
$firstImageArray = explode("/", $firstImage);
$firstImageId = end($firstImageArray);

/* ======================================
 * ## FUNCTIONS
 * ======================================
 */

/* 
 * Read and retrieve CSV data
 */
function readCSV( $input ){
  $file = fopen($input,"r");
  $csv = array();
  while (($row = fgetcsv($file)) !== false) {
    $csv[] = $row;
  }
  fclose($file);
	return $csv;
}

/* 
 * Build label/value pairs for a given field
 */
function setMdField( &$field, $label, $value ) {
  $field["label"] = $label;
  $field["value"] = $value;  
  return $field;
}

/* 
 * Request with Curl and return data
 */
function request( $url ) {
  // is curl installed?
  if (!function_exists('curl_init')){
    die('CURL is not installed!');
  }
  
  // get curl handle
  $ch = curl_init();
  
  // set request url
  curl_setopt($ch,
    CURLOPT_URL,
    $url);
  
  // return response, don't print/echo
  curl_setopt($ch,
    CURLOPT_RETURNTRANSFER,
    true);
  
  // More options for curl: http://www.php.net/curl_setopt	
  $response = curl_exec($ch);
  curl_close($ch);
  return $response;
}

/* 
 * Convert object to array recursively
 */
function object_to_array($obj) {
  if(is_object($obj)) $obj = (array) $obj;
  if(is_array($obj)) {
    $new = array();
    foreach($obj as $key => $val) {
      $new[$key] = object_to_array($val);
    }
  }else $new = $obj;
  return $new;
}


/* ======================================
 * ## CONSTANTES
 * ======================================
 */

$CONTEXT_PREZ = "http://iiif.io/api/presentation/2/context.json";
$CONTEXT_IMAGE = "http://iiif.io/api/image/2/context.json";
$PROFILE_IMAGE = "http://iiif.io/api/image/2/level1.json";
$IIIF_BASE_URI = "http://iiif.biblissima.fr/". $objectId;
$IMAGE_BASE_URI = "http://florus.bm-lyon.fr/fcgi-bin/iipsrv.fcgi?iiif=/var/www/florus/web/ms/" . $objectId;
$IMAGE_QUALITY = "default.jpg";

$MANIFEST_URI     = $IIIF_BASE_URI ."/manifest.json";
$SEQUENCE_URI     = $IIIF_BASE_URI . "/sequence/normal";
$CANVAS_BASE_URI  = $IIIF_BASE_URI . "/canvas/";
$ANNO_BASE_URI    = $IIIF_BASE_URI . "/annotation/";


/* ======================================
 * ## PRESENTATION RESOURCE PROPERTIES
 * ======================================
 */

// thumbnail
$thumbnail = $IMAGE_BASE_URI . "/" . $firstImageId . "/full/,150/0/" .$IMAGE_QUALITY;

// logo
$logo = "http://static.biblissima.fr/images/bm-lyon-logo.jpg";

// license
$license = "http://numelyo.bm-lyon.fr/conditions_utilisation";

// attribution
$attribution = "Bibliothèque municipale de Lyon";

// viewing hint
$viewingHint = "paged";

// Array of properties
$mfProperties = array(
  "attribution" => $attribution,
  "thumbnail"   => $thumbnail,
  "logo"        => $logo,
  "license"     => $license,
  "viewingHint" => $viewingHint
);


/* ======================================
 * ## PRIMARY RESOURCE TYPES
 * ======================================
 */

/* 
 * Canvases from Pagination
 */

$pages = $csvData;

$canvases = array( "canvases" => array() );

foreach($pages as $page) {
  
  $canvasLabel  = $page[0];
  $imageWidth   = $page[3];
  $imageHeight  = $page[4];
  $imageUrl     = $page[1];
  $imageUrlIiif = $page[2];
  
  $imageUrlArray = explode("/", $imageUrl);
  $imageId = end($imageUrlArray);
  $imageIdArray = explode(".", $imageId);
  $imageId = reset($imageIdArray);
  
  $images = array(
    "@id"         => $ANNO_BASE_URI . $imageId,
    "@type"       => "oa:Annotation",
    "motivation"  => "sc:painting",
    "resource"    => array(
      "@id"     => $imageUrl,
      "format"  => "image/tiff",
      "@type"   => "dctypes:Image",
      "service" => array(
        "@context"  => $CONTEXT_IMAGE,
        "profile"   => $PROFILE_IMAGE,
        "@id"       => $imageUrlIiif
      )
    ),
    "on"  => $CANVAS_BASE_URI . $imageId
  );
  
  $canvas = array(
    "@id"   => $CANVAS_BASE_URI . $imageId,
    "@type" => "sc:Canvas",
    "label" => "$canvasLabel",
    "width" => (int)$imageWidth,
    "height" => (int)$imageHeight,
    "images"  => array(),
  );
  
  $images["resource"]["width"] = (int)$imageWidth;
  $images["resource"]["height"] = (int)$imageHeight;

  array_push( $canvas['images'], $images );
  array_push( $canvases['canvases'], $canvas );
}

/* 
 * Sequence
 */

$sequences = array(
  "sequences" => array(
    "@id"     => $SEQUENCE_URI,
    "@type"   => "sc:Sequence",
    "label"   => "Normal"
));

$sequences = $sequences['sequences'] + $canvases;

/* 
 * Manifest
 */

$manifest = array(
  "@context"  => $CONTEXT_PREZ,
  "@id"       => $MANIFEST_URI,
  "@type"     => "sc:Manifest",
  "label"     => "$mfLabel",
  //"metadata"  => $mfMetadata,
  "sequences" => array($sequences)
);

$manifest = array_merge( $manifest, $mfProperties );

// PHP >= 5.4
$manifestJson = json_encode( $manifest, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE );

// PHP <= 5.4
//$manifestJson = str_replace('\\/', '/', json_encode($manifest));
//$manifestJson = mb_convert_encoding($manifest, 'UTF-8');

echo $manifestJson;

?>
